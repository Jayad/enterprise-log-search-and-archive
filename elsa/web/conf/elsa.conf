{
	"apikeys": { "elsa": "1" },
	"peers": {
		"127.0.0.1": {
			"url": "http://127.0.0.1/",
			"username": "elsa",
			"apikey": "1"
		}
	},
	# Email address system alerts should be sent to
	"admin_email_address": "root@localhost",
	# Uncomment to enable host activity checks to help spot log delays. Format is host IP as key, interval in seconds as value.
	#"host_checks": {
	#	"127.0.0.1": 60
	#},
	"connectors": {
		#"sirt": {
		#	"url": "http://myapp/enqueue",
		#},
		#"cif": {
		#	"url": "http://my.cif.instance/api/?apikey=myapikey"
		#}
	},
	"datasources": {
		#"test": {
		#	"alias": "test",
		#	"dsn": "dbi:mysql:database=elsa_web",
		#	"username": "root",
		#	"password": "",
		#	"query_template": "SELECT %s FROM query_log WHERE %s %s ORDER BY entered ASC LIMIT %d,%d",
		#	"fields": [ 
		#		{ "name": "query" }, 
		#		{ "name": "timestamp", "type": "timestamp", "alias": "timestamp" }, 
		#		{ "name": "num_results", "type": "int" }, 
		#		{ "name": "milliseconds", "type": "int" }
		#	]
	    #}
	},
	"transforms": {
#		"database": {
#			"Test": {
#				"alias": "test",
#				"dsn": "dbi:mysql:database=test",
#				"username": "root",
#				"password": "",
#				"query_template": "SELECT %s FROM test WHERE (ip=INET_ATON(?) OR ip=INET_ATON(?)) AND start_time <= FROM_UNIXTIME(?) AND end_time >= FROM_UNIXTIME(?) ORDER BY end_time DESC",
#				"query_placeholders": [ "srcip", "dstip", "timestamp", "timestamp" ],
#				"fields": [ "lookup1", "lookup2" ]
#			}
#		},
		"whois": {
			"known_subnets": {
				"10.0.0.0": {
					"end": "10.255.255.255",
					"org": "MyOrg"
				},
				"192.168.0.0": {
					"end": "192.168.255.255",
					"org": "MyOrg"
				},
				"172.16.0.0": {
					"end": "172.31.255.255",
					"org": "MyOrg"
				}
			},
			"known_orgs": {
				"MyOrg": {
					"name": "MyOrg",
					"org": "MyOrg",
					"descr": "MyOrg",
					"cc": "US",
					"country": "United States",
					"city": "Anytown",
					"state": "Somestate"
				}
			}
		},
		"parse":{
            "tld":[
                {
                    "field":"domain",
                    "pattern":"\\.([a-zA-Z]+)$",
                    "extractions":[
                        "tld"
                    ]
                },
                {
                    "field":"site",
                    "pattern":"\\.([a-zA-Z]+)$",
                    "extractions":[
                        "tld"
                    ]
                },
                {
                    "field":"uri",
                    "pattern":"\\.([a-zA-Z]+)(:|/|$)",
                    "extractions":[
                        "tld"
                    ]
                }
            ],
            "url":[
                {
                    "field":"uri",
                    "pattern":"(?:(?<proto>[a-zA-Z]+)://)?(?:(?<username>[^/]+):(?<password>[^/]+)@)?(?<domain>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|[^/]+\\.(?<tld>[a-zA-Z]+))(?::(?<port>\\d+))?(?<resource>/[^?]*)?(?:\\?(?<query_string>.*))?$",
                    "extractions":[
                        "proto",
                        "username",
                        "password",
                        "domain",
                        "tld",
                        "port",
                        "resource",
                        "query_string"
                    ]
                }
            ],
            "mimetype":[
                {
                    "field":"msg",
                    "pattern":"[\"'\\(\\[\\s\\|;:](?<mime>(?<type>application|audio|chemical|image|message|model|multipart|text|video)/(?<subtype>[\\w-_]+))[\"'\\)\\]\\s\\|;:]",
                    "extractions":[
                        "mime",
                        "type",
                        "subtype"
                    ]
                }
            ]
        }
		#"cif": {
		#	"dsn": "",
		#	"field_selection": {
		#		"BRO_DNS": "hostname"
		#	}		
		#},
		#"dnsdb": {
		#	"apikey": ""
		#}
	},		
	"plugins": {
            "SNORT": "Info::Snort",
            "WINDOWS": "Info::Windows",
            "URL": "Info::Url",
            "BRO_NOTICE": "Info::Bro"
    },
    "info": {
            "snort": {
				"url_templates": [ "http://doc.emergingthreats.net/bin/view/Main/%d" ]
            },
            "url": {
            	"url_templates": [ "http://whois.domaintools.com/%s" ]
            },
            "windows": {
                    "url_templates": [ "http://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=%d" ]
            }
    },
    # How many archive queries can be run simultaneously by all users?  (Can slow system)
    "max_concurrent_archive_queries": 4,
    # How often are queries run for alerts?  Default should be fine here.
    "schedule_interval" : 60,
    # How often should we recreate the node info cache?
    "node_info_cache_timeout": 60,
    # Settings for email alerts
	"email": {
		# Uncomment this and set the correct SMTP server for your org to get email
		#"smtp_server": "mail.example.com",
		# Uncomment this to set the TO address for email if not using AD authentication to provide that info
		#"to": "me@example.com",
		"display_address": "noreply-elsa@example.com",
		"base_url" : "http://elsa/",
		"subject": "ELSA Alert"
	},
	# Secret that is used to create the hash for the result permalinks.  Change it to anything you want, but after you've issued a link, changing it will invalidate that link in the future.
	"link_key" : "secret",
	"yui" : {
		#"local" : "inc",
		"version" : "2.8.1",
		"modifier" : ""
	},
    # This DB stores the query log, user permissions, etc. for the frontend.
    "meta_db" : {
            "dsn" : "dbi:mysql:database=elsa_web",
            "username" : "elsa",
            "password" : "biglog"
    },
    # Auth method.  Values can be "none," "db," and "ldap," and "kerberos" 
    "auth": {
		"method" : "none"
		#"method": "ldap" # set ldap config options below in "ldap"
		#"method": "db" # set config in "auth_db" below
		#"method": "kerberos" # set kerberos realm below in "kerberos"
    },
    # Groups that define who are admins.  These are local groups by default, but can be LDAP groups if using LDAP auth.
    "admin_groups" : [ "system", "admin" ],
    # Explicit list of allowed groups to login, all others will not even get a query interface. Can be LDAP groups, etc.
    #"allowed_groups": [ "system", "admin" ],
    # Example for LDAP auth over Active Directory
    #"ldap" : {
	#	"host" : "ldap.example.com",
	#	"bindDN" : "CN=ldap auth user,OU=AdminAccounts,DC=example,DC=com",
	#	"bindpw" : "goodpass",
	#	"base" : "DC=example,DC=com",
	#	"searchattrs" : "sAMAccountName",
	#	"attr_map" : {
	#	        "email" : "mail",
	#	        "display_name" : "displayName"
	#	},
	#	"groups_attr" : "memberOf",
	#	"extra_attrs" : {
	#	        "uid" : "uid",
	#	        "department" : "department"
	#	},
	#	"admin_groups" : {
	#	        "CN=Admins,OU=groups,DC=example,DC=com" : 1
	#	}
	#},
	# Example for Kerberos config
	#"kerberos": {
	#	"realm": "myKerberosRealmName"
	#},
	# Example config for auth_db using the local database, set auth method above to "db"
	#"auth_db": {
	#	"dsn": "dbi:mysql:database=elsa_web",
	#	"username": "root",
	#	"password": "",
	#	"auth_statement": "SELECT uid FROM users WHERE username=? AND password=PASSWORD(?)",
	#	"email_statement": "SELECT email FROM users WHERE username=?"
	#},
    "query_timeout": 55,
    # Backend node configuration
    "data_db" : {
    	"db": "syslog",
    	"username": "elsa",
    	"password": "biglog"
    },
    # URL for StreamDB
    #"pcap_url": "http://streamdb",
    # URL for sending IP block requests
    #"block_url": "http://my_block_host",
    # Where to place the ELSA management logs (not the logs we are receiving)
    "logdir" : "/data/elsa/log",
    # buffer_dir should match the entry in elsa_node.conf
    "buffer_dir": "/data/elsa/tmp/buffers",
    # Logging level management logs (does not affect logs received).
    "debug_level" : "TRACE",
    #"custom_javascript_includes": [ "http://my.local.site/inc.js" ],
    # Uncomment this to default to checking the box for reusing the same query tab
    #"same_tab_for_queries_default": 1,
    "default_start_time_offset": 2,
    #"additional_display_columns": [ "host", "program", "class", "node" ],
    #"grid_view_default": 1,
    "livetail": {
    	# How often should the window refresh when viewing a livetail?
    	"poll_interval": 5,
    	# What is the max time a livetail can run for?
    	"time_limit": 3600
    }
}